local x = game.PlaceId
if x^2-131579468225600*x-16732694052*x+2201678985343820114131200 ~= 0 then
    warn("PlaceId tidak sah!")
    return
else
    repeat task.wait() until game:IsLoaded() and game.Players.LocalPlayer
    print("Game dimuat dan LocalPlayer dikesan!")
end
local plr = game.Players.LocalPlayer
local chr = plr.Character
local hum = chr:FindFirstChildWhichIsA"Humanoid"
local hrp = chr.HumanoidRootPart
local plrGui = plr.PlayerGui
local running = true
local fishingZones = workspace.zones.fishing
local lt = game:GetService"Lighting"
local us = game:GetService"UserInputService"
local rs = game:GetService"ReplicatedStorage"
local vi = game:GetService"VirtualInputManager"
local pstat = rs.playerstats[plr.Name].Stats
local rsEvs = rs.events
local rsWorld = rs.world
local cam = workspace.CurrentCamera
local auroraActive, sunkenActive, plrListDD
local pauseFishing = false
local lastReel = os.time()
local startTime = os.time()
local sessionStart = os.time()
local plrNames = {}
local statGuis = {}
local binds = {}
local togs = {
    cast = false,
    lcst = false,
    shake = true,
    autocatch = true,
    appraise = false,
    luck = false,
    sell = false,
    anglerQ = false,
    evf = false,
    temp = true,
    invcam = true,
    click = false,
    sundialmeg = false,
    sundialkraken = false,
    oxyg = true,
    swim = false,
    fb = false,
    sunkenchest = false,
    enchant = false,
    rl_parts = false,
    seralaser = false,
    rmvfish = false,
    rodspam = false
}
local cd = {
    cast = true,
    catch = true,
    appraise = true,
    luck = true,
    sell = true,
    anglerQ1 = true,
    anglerQ2 = true,
    evf = true,
    click = true,
    spamsundial = true,
    webhook = true,
    rodspam = true
}
local webhookOpt = {
    enabled = true,
    test = false,
    url = "[URL_WEBHOOK_ANDA]" -- Ganti dengan URL webhook anda
}
local rates = {
    money = 0,
    xp = 0
}
local vals = {
    tpws = 5,
    anchor = nil,
    acspeed = .1,
    catch = 0,
    perfect = 100,
    money = pstat.coins.Value,
    xp = pstat.xp.Value,
    enchant = "none",
    crateType = "",
    crateAmnt = 1,
    totemType = "",
    totemAmnt = 1,
    pRod = "",
    FishCaught = 0,
    FishLost = 0,
    CatchCount = 0,
    Duration = 0
}
local purchase = {
    ["Bait Crate"] = {v = false, a = 1},
    ["Quality Bait Crate"] = {v = false, a = 1},
    ["Coral Geode"] = {v = false, a = 1}
}
local totems = {
    ["Sundial Totem"] = {
        use = false,
        during = "Day",
        buyAmount = 1,
        db = false
    },
    ["Aurora Totem"] = {
        use = false,
        buyAmount = 1,
        db = false
    }
}
local events = {
    {"Shark Hunt", 0, false},
    {"Megalodon", 0, false},
    {"Depth Serpent", 0, false},
    {"Isonade", 0, true},
    {"Kraken", 0, false},
    {"Orcas", 0, false},
    {"Ancient Orcas", 0, false},
    {"Lovestorm", 0, false},
    {"Scylla", 0, false}
}
local wps = {
    areas1 = {
        "Moosewood",
        "Roslit",
        "Roslit - Volcano",
        "Mushgrove Swamp",
        "Terrapin",
        "Snowcap",
        "Sunstone",
        "Forsaken Shores",
        "Keepers Altar",
        "Vertigo",
        "The Depths",
        "Desolate Pocket",
        "Brine Pool",
        "Ancient Isle",
        "Ancient Isle - Waterfall",
        "Ancient Archives"
    },
    north = {
        "Northern Summit",
        "Overgrowth Caves1",
        "Overgrowth Caves2",
        "Frigid Cavern1",
        "Frigid Cavern2",
        "Cryogenic Canal",
        "Glacial Grotto1",
        "Glacial Grotto2"
    },
    atlantis = {
        "Grand Reef",
        "Atlantean Storm",
        "Atlantis Main",
        "Sunken Depths",
        "Ethereal Abyss",
        "Poseidon Temple",
        "Zeus Trial",
        "Kraken Pool"
    },
    veil = {
        "Volcanic Vents1",
        "Volcanic Vents2",
        "Challenger's Deep1",
        "Challenger's Deep2",
        "Abyssal Zenith",
        "Large Gate",
        "Calm Zone",
        "Veil of the Forsaken"
    },
    items = {
        "Rod Of The Depths"
    }
}
local coords = {
    ["Moosewood"] = {387, 135, 256},
    ["Roslit"] = {-1464, 133, 724},
    ["Roslit - Volcano"] = {-1958, 173, 258},
    ["Mushgrove Swamp"] = {2522, 132, -704},
    ["Terrapin"] = {-160, 143, 1928},
    ["Snowcap"] = {2600, 135, 2414},
    ["Sunstone"] = {-927, 133, -1120},
    ["Forsaken Shores"] = {-2486, 133, 1557},
    ["Keepers Altar"] = {1310, -802, -89},
    ["Vertigo"] = {-111, -515, 1140},
    ["The Depths"] = {946, -712, 1256},
    ["Desolate Pocket"] = {-1661, -214, -2839},
    ["Brine Pool"] = {-1797, -143, -3366},
    ["Ancient Isle"] = {6069, 195, 306},
    ["Ancient Isle - Waterfall"] = {5801, 135, 405},
    ["Ancient Archives"] = {-3153, -755, 1922},
    ["Northern Summit"] = {19552, 133, 5299},
    ["Overgrowth Caves1"] = {19756, 415, 5412},
    ["Overgrowth Caves2"] = {20306, 272, 5471},
    ["Frigid Cavern1"] = {20229, 731, 5685},
    ["Frigid Cavern2"] = {19844, 439, 5617},
    ["Cryogenic Canal"] = {20018, 508, 5415},
    ["Glacial Grotto1"] = {19958, 1143, 5537},
    ["Glacial Grotto2"] = {20034, 883, 5639},
    ["Grand Reef"] = {-3593, 132, 566},
    ["Atlantean Storm"] = {-3645, 131, 780},
    ["Rod Of The Depths"] = {1701, -903, 1434},
    ["Trident Puzzle"] = {-1477, -225, -2321},
    ["Atlantis Main"] = {-4261, -603, 1810},
    ["Sunken Depths"] = {-4938, -595, 1835},
    ["Ethereal Abyss"] = {-3794, -564, 1834},
    ["Poseidon Temple"] = {-4038, -558, 922},
    ["Zeus Trial"] = {-4296, -627, 2682},
    ["Kraken Pool"] = {-4375, -996, 2049},
    ["Aurora Totem"] = {-1812, -137, -3282},
    ["Sundial Totem"] = {-1149, 137, -1077},
    ["Volcanic Vents1"] = {-3472, -2258, 3848},
    ["Volcanic Vents2"] = {-3196, -2039, 4031},
    ["Challenger's Deep1"] = {-760, -3283, -702},
    ["Challenger's Deep2"] = {726, -3361, -1580},
    ["Abyssal Zenith"] = {-13496, -11050, 144},
    ["Large Gate"] = {-4332, -11183, 3228},
    ["Calm Zone"] = {-4317, -11185, 3678},
    ["Veil of the Forsaken"] = {-2342, -11184, 7095}
}
local appraiseSettings = {
    slot = nil,
    mutations = {
        Abyssal = false,
        Albino = false,
        Amber = false,
        Darkened = false,
        Electric = false,
        Fossilized = false,
        Frozen = false,
        Glossy = false,
        Greedy = false,
        Hexed = false,
        Lunar = false,
        Midas = false,
        Mosaic = false,
        Mythical = false,
        Negative = false,
        Scorched = false,
        Silver = false,
        Translucent = false
    },
    attributes = {Big = false, Giant = false, Shiny = false, Sparkling = false}
}
local fzs = {
    ["Shark Hunt"] = {"Whale Shark", "Great White Shark", "Great Hammerhead Shark"},
    ["Megalodon"] = {"Megalodon Default"},
    ["Depth Serpent"] = {"The Depths - Serpent"},
    ["Kraken"] = {"The Kraken Pool"},
    ["Isonade"] = {"Isonade"},
    ["Orcas"] = {"Orcas Pool"},
    ["Ancient Orcas"] = {"Ancient Orcas Pool"},
    ["Lovestorm"] = {"Lovestorm Eel", "Lovestorm Eel Supercharged"},
    ["Scylla"] = {"Forsaken Veil - Scylla"}
}
local sunkenLocs = {
    moosewood = {{936, 130, -159}, {693, 130, -362}, {613, 130, 498}, {285, 130, 564}, {283, 130, -159}},
    roslit = {{-1179, 130, 565}, {-1217, 130, 201}, {-1967, 130, 980}, {-2444, 130, 266}, {-2444, 130, -37}},
    sunstone = {{-852, 130, -1560}, {-1000, 130, -751}, {-1500, 130, -750}, {-1547, 130, -1080}, {-1618, 130, -1560}},
    terrapin = {{798, 130, 1667}, {562, 130, 2455}, {393, 130, 2435}, {-1, 130, 1632}, {-190, 130, 2450}},
    mushgrove = {{2890, 130, -997}, {2729, 130, -1098}, {2410, 130, -1110}, {2266, 130, -721}},
    forsaken = {{-2460, 130, 2047}}
}
local enchants = {"Abyssal", "Blessed", "Breezed", "Clever", "Controlled", "Divine", "Ghastly", "Hasty", "Herculean", "Insight", "Long", "Lucky", "Mutated", "Noir", "Quality", "Resilient", "Scrapper", "Sea King", "Steady", "Storming", "Swift", "Unbreakable", "Wormhole"}
if not workspace:FindFirstChild"platform" then
    local p = Instance.new"Part"
    p.Name = "platform"
    p.Parent = workspace
    p.Transparency = .75
    p.Size = Vector3.new(2, .1, 2)
    p.Anchored = true
    p.CFrame = CFrame.new(0, 0, 0)
end
for _, v in pairs(game.Players:GetPlayers()) do
    table.insert(plrNames, v.Name)
end
local platform = workspace:FindFirstChild"platform"
local WHC = loadstring(game:HttpGet"https://raw.githubusercontent.com/LopenaFollower/Lua/main/webhook.lua")()
local GUI = loadstring(game:HttpGet"https://raw.githubusercontent.com/LopenaFollower/Lua/main/gui%20lib.lua")()
local UI = GUI:CreateWindow("0x3b5 Internal Edition", "v1.2")
function notify(t, m, d)
    game.StarterGui:SetCore("SendNotification", {
        Title = t or "";
        Text = m or "";
        Duration = d or 1;
    })
end
function toHMS(s)
    return string.format("%02i:%02i:%02i", s / 3600, s / 60 % 60, s % 60)
end
function formatNum(n)
    return tostring(math.floor(n)):reverse():gsub("(%d%d%d)", "%1,"):gsub(",(%-?)$", "%1"):reverse()
end
function mouse(x, y, d, l)
    vi:SendMouseButtonEvent(x, y, 0, d, l or plr, 0)
end
function press(key)
    vi:SendKeyEvent(1, key, 0, game)
    vi:SendKeyEvent(0, key, 0, game)
end
function tpTo(name)
    hrp.CFrame = CFrame.new(unpack(coords[name]))
end
function tpOnPart(pt, t)
    local p = pt.Position
    local h = t and pt.Size.Y / 2 or 0
    local top = t and pt.Size.Y / 2 + 5 or pt.Size.Y / 4
    platform.CFrame = CFrame.new(p.X, p.Y + top - 3, p.Z)
    hrp.CFrame = CFrame.new(p.X, p.Y + top, p.Z)
end
function removeVelocity()
    pcall(function()
        hrp.AssemblyAngularVelocity = Vector3.zero
        hrp.AssemblyLinearVelocity = Vector3.zero
        hrp.Velocity = Vector3.zero
    end)
end
function unequip()
    for _, v in pairs(chr:GetChildren()) do
        if v:IsA"Tool" then
            v.Parent = plr.Backpack
        end
    end
end
function equipBP(v)
    rs.packages.Net["RE/Backpack/Equip"]:FireServer(v)
end
function getRod()
    for _, v in pairs(chr:GetChildren()) do
        if v:IsA"Tool" and v.Name:lower():find"rod" then
            return v
        end
    end
    for _, v in pairs(plr.Backpack:GetChildren()) do
        if v.Name:lower():find"rod" then
            return v
        end
    end
end
function equipRod()
    equipBP(getRod())
end
function useTotem(name)
    local totem = plr.Backpack:FindFirstChild(name)
    if totem then
        repeat task.wait() until not plrGui:FindFirstChild"reel" and not plrGui:FindFirstChild"shakeui"
        equipBP(totem)
        task.wait(.25)
        mouse(0, 0, 1)
        mouse(0, 0, 0)
        task.wait(.1)
        mouse(0, 0, 1)
        mouse(0, 0, 0)
        task.wait(.4)
        equipRod()
    elseif totems[name].buyAmount > 0 then
        rsEvs.purchase:FireServer(name, "item", nil, totems[name].buyAmount)
        task.wait(.5)
        useTotem(name)
    end
end
binds.main = game:GetService"RunService".Stepped:Connect(function()
    pcall(function()
        plr = game.Players.LocalPlayer
        chr = plr.Character
        hum = chr.Humanoid
        hrp = chr.HumanoidRootPart
        plrGui = plr.PlayerGui
        if togs.fb then
            lt.brightness.Enabled = true
            lt.cc.Enabled = false
            lt.location.Enabled = false
            lt.uiblur.Enabled = false
            lt.uicc.Enabled = false
            lt.underwaterbl.Enabled = false
            lt.underwatercc.Enabled = false
            lt.atmos.Density = 0
            lt.Brightness = 2
            lt.ClockTime = 14
            lt.FogEnd = 1e5
            lt.GlobalShadows = false
            lt.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
        end
        local folder = chr.Resources
        folder.temperature.Disabled = togs.temp
        folder["temperature(heat)"].Disabled = togs.temp
        folder.oxygen.Disabled = togs.oxyg
        folder["oxygen(peaks)"].Disabled = togs.oxyg
        UI["Session Stats"].Uptime.setInfo(toHMS(os.time() - sessionStart))
        UI["Session Stats"].Money.setInfo(formatNum(rates.money) .. "/hr")
        UI["Session Stats"].XP.setInfo(formatNum(rates.xp) .. "/hr")
        local ea = workspace.world.interactables:FindFirstChild"Enchant Altar"
        if ea then
            ea.ProximityPrompt.HoldDuration = 0
        end
        plr.Passdown:Destroy()
    end)
    print("Loop berjalan...")
    if togs.tpw and chr and hum then
        if hum.MoveDirection.Magnitude > 0 then
            chr:TranslateBy(hum.MoveDirection * vals.tpws / 5)
        end
    end
    if togs.cast and cd.cast and not pauseFishing then
        cd.cast = false
        local rod = getRod()
        if rod and rod:FindFirstChild"values" then
            if not rod.values.casted.Value then
                if togs.lcst then
                    mouse(0, 0, 1)
                    task.wait(.4)
                    mouse(0, 0, 0)
                else
                    rod.events.cast:FireServer(1)
                    task.wait(.2)
                end
            end
        end
        cd.cast = true
    end
    if togs.shake and plrGui:FindFirstChild"shakeui" and plrGui.shakeui.safezone:FindFirstChild"button" then
        local btn = plrGui.shakeui.safezone.button
        btn.Position = UDim2.new(.5, 0, .5, 0)
        local x, y = btn.AbsolutePosition.X + btn.AbsoluteSize.X / 1.5, btn.AbsolutePosition.Y + btn.AbsoluteSize.Y / 1.5
        mouse(x, y, 1, btn)
        mouse(x, y, 0, btn)
    end
    if togs.appraise and cd.appraise then
        cd.appraise = false
        if appraiseSettings.slot then
            local done = false
            local item = plrGui.hud.safezone.backpack.hotbar[appraiseSettings.slot]
            local itemName, itemId = item.itemname.Text, item.item.Value
            if not chr:FindFirstChildOfClass"Tool" then
                for _, v in pairs(plr.Backpack:GetChildren()) do
                    if v:FindFirstChild"link" then
                        if v.link.Value == itemId then
                            v.Parent = chr
                            break
                        end
                    end
                end
            end
            for k, v in pairs(appraiseSettings.mutations) do
                if v and itemName:find(k) then
                    done = true
                    UI.Appraise.Appraise.setStatus(false)
                    break
                end
            end
            for k, v in pairs(appraiseSettings.attributes) do
                if v and itemName:find(k) then
                    done = true
                    UI.Appraise.Appraise.setStatus(false)
                    break
                end
            end
            if not done and chr:FindFirstChildOfClass"Tool" then
                pcall(function()
                    workspace.world.npcs.Appraiser.appraiser.appraise:InvokeServer()
                end)
            end
        end
        task.wait(.1)
        cd.appraise = true
    end
    if togs.luck and cd.luck then
        cd.luck = false
        pcall(function()
            workspace.world.npcs.Merlin.Merlin.luck:InvokeServer()
        end)
        task.wait(.05)
        cd.luck = true
    end
    if togs.anglerQ and cd.anglerQ1 then
        cd.anglerQ1 = false
        pcall(function()
            local ag = workspace.world.npcs["The Depths Angler"].angler
            ag.giveQuest:InvokeServer()
            ag.questCompleted:InvokeServer()
        end)
        task.wait(.25)
        cd.anglerQ1 = true
    end
    if togs.anglerQ and cd.anglerQ2 then
        cd.anglerQ2 = false
        for _, v in pairs(plrGui.hud.deviceinset.quests:GetChildren()) do
            if v:IsA"Frame" then
                if v.title.Text == "Angler Quest" then
                    local goal = v.line1.Text
                    if v.line1.TextColor3.r == 1 then
                        if not chr:FindFirstChild(goal) and plr.Backpack:FindFirstChild(goal) then
                            equipBP(plr.Backpack[goal])
                        elseif not chr:FindFirstChild(getRod().Name) then
                            equipRod()
                        end
                    end
                end
            end
        end
        task.wait(1)
        cd.anglerQ2 = true
    end
    if togs.sell and cd.sell then
        cd.sell = false
        rsEvs.SellAll:InvokeServer()
        task.wait(5)
        cd.sell = true
    end
    if togs.evf and cd.evf and not pauseFishing and not sunkenActive then
        cd.evf = false
        local he = false
        for i = 1, #events do
            local v = events[i]
            if v[2] > 0 then
                local efv = nil
                for _, fz in pairs(fzs[v[1]]) do
                    if fishingZones:FindFirstChild(fz) then
                        efv = fz
                        break
                    end
                end
                if efv then
                    local fp = fishingZones:FindFirstChild(efv)
                    if fp then
                        he = true
                        removeVelocity()
                        hum:SetStateEnabled(4, false)
                        tpOnPart(fp, v[3])
                        hum:ChangeState"Running"
                        break
                    end
                end
            end
        end
        if not he then
            hum:SetStateEnabled(4, not togs.swim)
            hrp.Anchored = false
            if vals.anchor then
                hrp.CFrame = vals.anchor
            end
        end
        task.wait(.1)
        cd.evf = true
    end
    if cd.spamsundial then
        cd.spamsundial = false
        local use = false
        if not workspace.zones.fishing:FindFirstChild"Megalodon Default" and togs.sundialmeg then
            use = true
        elseif not workspace.zones.fishing:FindFirstChild"The Kraken Pool" and togs.sundialkraken then
            use = true
        end
        if use then
            useTotem"Sundial Totem"
        end
    end
    if togs.click and cd.click then
        cd.click = false
        mouse(0, 0, 1)
        mouse(0, 0, 0)
        task.wait(vals.acspeed)
        cd.click = true
    end
    if (webhookOpt.enabled or webhookOpt.test) and cd.webhook and webhookOpt.url ~= "" then
        cd.webhook = false
        print("Mencuba menghantar webhook ke: " .. webhookOpt.url)
        print("cd.webhook: " .. tostring(cd.webhook) .. ", enabled: " .. tostring(webhookOpt.enabled) .. ", url: " .. webhookOpt.url)
        local lt = DateTime.now():ToLocalTime()
        local ct = lt:FormatLocalTime("hh:mm:ss", "en-US")
        local elapsed = toHMS(os.time() - sessionStart)
        if lt.Minute == 0 or webhookOpt.test then
            local w = WHC:connect(webhookOpt.url)
            w:title"Hourly Report"
            w:author("0x3b5", "https://discord.gg/Fh5rmgg27X", "https://media.discordapp.net/attachments/1320467041752449116/1332649895445790761/101_20250125105259.png")
            w:addField("Money", formatNum(math.ceil(pstat.coins.Value)) .. "C$ (" .. formatNum(rates.money) .. "/hr)", true)
            w:addField("Level", formatNum(pstat.level.Value) .. " (" .. formatNum(rates.xp) .. " XP/hr)", true)
            w:addField("Catch Rate", vals.FishCaught .. " / " .. vals.FishLost .. " (" .. string.format("%.3f", (vals.FishCaught / (vals.FishCaught + vals.FishLost) * 100)) .. "%)", true)
            w:addField("Fish Caught", vals.FishCaught > 0 and "Fish was Caught!" or "No fish caught", true)
            w:addField("Runtime", elapsed, true)
            w:addField("Time", ct, true)
            w:footer("Uptime: " .. elapsed)
            w:timestamp()
            local success, err = pcall(function()
                w:send()
            end)
            if success then
                print("Webhook berjaya dihantar!")
            else
                warn("Ralat menghantar webhook: " .. err)
            end
            if webhookOpt.test then
                task.wait(1)
            else
                task.wait(70)
            end
            webhookOpt.test = false
        else
            task.wait(5)
        end
        cd.webhook = true
    end
    if togs.rodspam then
        rsEvs["reelfinished "]:FireServer(100, math.random(1, 100) <= vals.perfect)
    end
    if togs.cast and togs.rodspam and cd.rodspam and (os.time() - lastReel) > 2 then
        cd.rodspam = false
        for i = 0, 1 do
            lastReel = os.time()
            getRod().events.breakbobber:FireServer()
            getRod().events.reset:FireServer()
            getRod().Parent = plr.Backpack
            task.wait(.2)
            equipRod()
            getRod().events.cast:FireServer(1)
            task.wait(.45)
        end
        cd.rodspam = true
    end
end)

binds.reel = plrGui.ChildAdded:Connect(function(v)
    if v.Name == "reel" and togs.autocatch then
        local MinigameStart = os.time()
        if not togs.rodspam then
            repeat
                v.bar.playerbar.Size = UDim2.new(1, 0, 1.3, 0)
                task.wait()
                if os.time() >= MinigameStart + vals.catch then
                    rsEvs["reelfinished "]:FireServer(100, math.random(1, 100) <= vals.perfect)
                    vals.Duration = (os.time() - MinigameStart) / 1000
                    vals.FishCaught = vals.FishCaught + 1
                    vals.CatchCount = vals.CatchCount + 1
                end
            until not plrGui:FindFirstChild"reel"
        else
            v.bar.playerbar.Size = UDim2.new(1, 0, 1.3, 0)
            rsEvs["reelfinished "]:FireServer(100, math.random(1, 100) <= vals.perfect)
            vals.Duration = (os.time() - MinigameStart) / 1000
            vals.FishCaught = vals.FishCaught + 1
            vals.CatchCount = vals.CatchCount + 1
            getRod().Parent = plr.Backpack
            task.wait()
            getRod().Parent = chr
            lastReel = os.time()
            v:Destroy()
        end
        -- Logik kehilangan ikan (contoh berdasarkan bar size)
        if not v:FindFirstChild("bar") or v.bar.playerbar.Size.Y.Scale < 0.1 then
            vals.FishLost = vals.FishLost + 1
        end
        vals.Duration = (os.time() - MinigameStart) / 1000
    end
end)
-- [Seterusnya, salin baki kod seperti GUI dan halaman seperti asal]
